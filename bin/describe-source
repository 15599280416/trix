#!/usr/bin/env ruby

def resolve(path)
  if File.directory?(path)
    Dir.entries(path).flat_map do |entry|
      if entry == "." || entry == ".."
        []
      else
        resolve(File.join(path, entry))
      end
    end
  elsif File.file?(path)
    [path]
  else
    warn "#{path}: not found"
    exit
  end
end

def process(path)
  class_name = nil
  line_number = 0

  File.open(path, "r") do |file|
    file.each_line do |line|
      line.chomp!
      line_number += 1

      if line =~ /\bclass ([^ ]+)?( ?extends ([^ ]+))? *$/
        class_name = $1 || "(anonymous)"
        superclass_name = $3
        result = format_class(class_name, superclass_name)

      elsif line =~ /^ +(@)?([^\s:]+): (.*)[=-]> *$/
        method_sigil = $1
        method_name = $2
        arguments = $3[/\((.*)\)/, 1]
        result = format_method(class_name, method_sigil, method_name, arguments)
      end

      if result
        puts "#{path}:#{line_number} #{result}"
      end
    end
  end
end

def format_class(class_name, superclass_name)
  result = "class #{class_name}"
  result << " extends #{superclass_name}" if superclass_name
  result
end

def format_method(class_name, method_sigil, method_name, arguments)
  joiner = method_sigil == "@" ? "." : "#"
  result = "#{class_name}#{joiner}#{method_name}"
  result << " (#{arguments})" if arguments
  result
end

paths = ARGV.flat_map { |path| resolve(path) }
paths.each { |path| process(path) }
